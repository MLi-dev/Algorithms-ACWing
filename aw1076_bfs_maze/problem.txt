Given nxn grid as below:

int maze[5][5] = {

0, 1, 0, 0, 0,

0, 1, 0, 1, 0,

0, 0, 0, 0, 0,

0, 1, 1, 1, 0,

0, 0, 0, 1, 0,

};
It is a maze, 1 is the wall, 0 is the path. You can only walk vertically or horizontally.
Find out from left upper conner to right bottom conner's shortest path.

It is guaranteed to have at least one valid path.

Things to remember: FOUR CONNECTION
1. Instead of st[N][N], use PII pre[N][N] to record path.
2. Initialize all position as -1 in bfs, do memset(pre, -1, sizeof pre);
3. After putting into queue q[++tt] = {nx, ny}, record current position of pre, pre[nx][ny] = t;
Pattern: Exclusively t on one side, n on other side ALWAYS.
4. In main(), start bfs at bfs(n-1, n-1);
5. PII start = {0, 0};
6. while(true) Will break when reaching end. Need Three conditions: Print, Break, Set Start.
7. printf("%d%d\n", start.x, start.y};
8. if(start.x == n-1 && start.y==n-1) break;
9. start = pre[start.x][start.y]; Gets next position

Input
n
nxn grid with 0 or 1

Output
output the path from (0,0) to (n-1, n-1)

Constraints:

0≤n≤1000

Sample input:
5
0 1 0 0 0
0 1 0 1 0
0 0 0 0 0
0 1 1 1 0
0 0 0 1 0
Sample output:
0 0
1 0
2 0
2 1
2 2
2 3
2 4
3 4
4 4