Mike likes hiking in the mountain and to plan for his trip he needs to know how many peaks and valleys

Given a n*n grid map, each grid is (i, j) and marked height as w(i, j)

The neighbor grid of (i,j) are (i−1,j−1),(i−1,j),(i−1,j+1),(i,j−1),(i,j+1),(i+1,j−1),(i+1,j),(i+1,j+1).

We consider a set S as valley when it has below conditions
S all grids has same height
S all grids are connected
if ws>ws′（peak），or ws<ws′（valley).
a set can be both peak or valley, it can also be neither peak nor valley

Things to remember:
1. Define bool has_lower and has_higher in double loop before calling bfs.
2. Pass in &has_lower, &has_higher as reference in bfs.
3. if !has_higher, peaks++, !has_lower, valleys++;
Make sure two conditions: if(has_lower) and if(has_higher), because it's possible to be in between lowest, highest. Neither peak nor valley.
4. Extra if condition:
               if(g[t.x][t.y] != g[i][j])   {
                    if(g[t.x][t.y] < g[i][j]) has_higher = true;
                    else has_lower = true;
               }
               else {
                if(!st[i][j]), put in q, set st[i][j] true.
               }


Input
n, the size of map
nXn shows the height of the grid

Output
number of peaks and valleys

Constraints:
1≤n≤1000,
0≤w≤10^9

Sample input 1:
5
8 8 8 7 7
7 7 8 8 7
7 7 7 7 7
7 8 8 7 8
7 8 8 8 8
Sample output 1:
2 1

Sample input 2:
5
5 7 8 3 1
5 5 7 6 6
6 6 6 2 8
5 7 2 5 8
7 1 0 1 7
Sample output 2:
3 3